import React, { useState, useEffect, useContext } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Dimensions,
  ScrollView,
  Modal,
  Pressable,
  Keyboard,
  KeyboardAvoidingView,
  TouchableWithoutFeedback,
  Alert,
  Image,
} from "react-native";
import * as ImagePicker from "expo-image-picker"; // S·ª≠ d·ª•ng expo-image-picker
import { useNavigation } from "@react-navigation/native";
import { api, typeHTTP } from "../../utils/api";
import { globalContext } from "../../context/globalContext";

const { width, height } = Dimensions.get("window");

// H√†m ƒë·ªãnh d·∫°ng ng√†y theo DD/MM/YYYY
const formatDate = (date) => {
  const d = new Date(date);
  const day = `0${d.getDate()}`.slice(-2);
  const month = `0${d.getMonth() + 1}`.slice(-2);
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
};

// H√†m chuy·ªÉn ƒë·ªïi ng√†y t·ª´ ƒë·ªãnh d·∫°ng DD/MM/YYYY th√†nh Date object
const parseDate = (dateString) => {
  const [day, month, year] = dateString.split("/");
  return new Date(`${year}-${month}-${day}`);
};

export default function UpdateInformation() {
  const { globalData } = useContext(globalContext);
  const navigation = useNavigation();
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    email: "",
    dateOfBirth: "",
    gender: "",
    state: "",
    profilePictureURL: null, // ƒê·ªÉ l∆∞u URL ·∫£nh sau khi t·∫£i l√™n th√†nh c√¥ng
  });

  const [isModalVisible, setModalVisible] = useState(false);
  const [image, setImage] = useState(null); // ƒê·ªÉ l∆∞u ·∫£nh t·∫°m tr∆∞·ªõc khi t·∫£i l√™n

  useEffect(() => {
    fetchUserProfile();
    fetchUserPersonalInfo();
  }, []);

  // H√†m l·∫•y d·ªØ li·ªáu h·ªì s∆° ng∆∞·ªùi d√πng
  const fetchUserProfile = async () => {
    try {
      const profileResponse = await api({
        method: typeHTTP.GET,
        url: "/user/profile",
        sendToken: true,
      });

      const userProfile = profileResponse.user;

      if (userProfile) {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu profile ng∆∞·ªùi d√πng
        setFormData((prevState) => ({
          ...prevState,
          fullName: userProfile.fullName || "",
          phone: userProfile.phoneNumber || "",
          email: userProfile.email || "",
        }));
      }
    } catch (error) {
      // X·ª≠ l√Ω l·ªói n·∫øu c·∫ßn, kh√¥ng c·∫ßn hi·ªán th√¥ng b√°o
    }
  };

  // H√†m l·∫•y d·ªØ li·ªáu c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
  const fetchUserPersonalInfo = async () => {
    try {
      const personalInfoResponse = await api({
        method: typeHTTP.GET,
        url: "/userPersonal/personal-info",
        sendToken: true,
      });

      const userPersonalInfo = personalInfoResponse.userPersonalInfo;

      if (userPersonalInfo) {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
        setFormData((prevState) => ({
          ...prevState,
          dateOfBirth: formatDate(userPersonalInfo.dateOfBirth) || "",
          gender: userPersonalInfo.gender || "",
          state: userPersonalInfo.state || "",
          profilePictureURL: userPersonalInfo.profilePictureURL || null,
        }));
      }
    } catch (error) {
      // X·ª≠ l√Ω l·ªói n·∫øu c·∫ßn, kh√¥ng c·∫ßn hi·ªán th√¥ng b√°o
    }
  };

  const uploadImage = async (base64Image) => {
    try {
      const userId = globalData.user?.id;
      if (!userId) {
        Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y userId.");
        return null;
      }

      if (!base64Image) {
        Alert.alert("L·ªói", "D·ªØ li·ªáu Base64 c·ªßa ·∫£nh b·ªã thi·∫øu.");
        return null;
      }

      // Kh·ªüi t·∫°o fullBase64Image v·ªõi MIME type c·ªßa ·∫£nh
      const fullBase64Image = `data:image/png;base64,${base64Image}`; // ƒê·∫£m b·∫£o ƒë√∫ng ƒë·ªãnh d·∫°ng

      // G·ª≠i request POST ƒë·∫øn API server
      const response = await api({
        method: typeHTTP.POST,
        url: `/upload/uploadBase64`,
        data: { imageBase64: fullBase64Image }, // G·ª≠i ƒë√∫ng ƒë·ªãnh d·∫°ng Base64
        sendToken: true,
      });

      if (response.success) {
        return response.url;
      } else {
        Alert.alert("L·ªói", "T·∫£i l√™n ·∫£nh th·∫•t b·∫°i.");
        return null;
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i ·∫£nh:", error);
      Alert.alert("L·ªói", "ƒê√£ x·∫£y ra l·ªói khi t·∫£i ·∫£nh.");
      return null;
    }
  };

  // Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  const openImageLibrary = async () => {
    try {
      const permissionResult =
        await ImagePicker.requestMediaLibraryPermissionsAsync();

      if (!permissionResult.granted) {
        Alert.alert("B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh!");
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 0.5,
        base64: true, // L·∫•y Base64 c·ªßa ·∫£nh
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const selectedImageBase64 = result.assets[0].base64; // L·∫•y d·ªØ li·ªáu Base64 c·ªßa ·∫£nh
        console.log("Base64 from library:", selectedImageBase64); // Log Base64
        if (selectedImageBase64) {
          const uploadedImageUrl = await uploadImage(selectedImageBase64); // Upload ·∫£nh base64
          if (uploadedImageUrl) {
            setFormData({ ...formData, profilePictureURL: uploadedImageUrl });
          } else {
            Alert.alert("L·ªói", "T·∫£i l√™n ·∫£nh th·∫•t b·∫°i.");
          }
        } else {
          Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ·∫£nh.");
        }
      } else {
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ch·ªçn ·∫£nh.");
      }
    } catch (error) {
      console.error("L·ªói khi ch·ªçn ·∫£nh:", error);
      Alert.alert("L·ªói", "ƒê√£ x·∫£y ra l·ªói khi ch·ªçn ·∫£nh.");
    }
  };

  // H√†m ƒë·ªÉ m·ªü modal ch·ªçn ·∫£nh ho·∫∑c camera
  const toggleModal = () => {
    setModalVisible((prev) => !prev); // Ch·ªâ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa modal khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
  };

  const handleInputChange = (field, value) => {
    setFormData({ ...formData, [field]: value });
  };

  const handleSubmit = async () => {
    try {
      let imageUrl = formData.profilePictureURL;

      // N·∫øu c√≥ ·∫£nh m·ªõi, t·∫£i ·∫£nh l√™n tr∆∞·ªõc
      if (image) {
        imageUrl = await uploadImage(image);
        if (!imageUrl) {
          Alert.alert("L·ªói", "T·∫£i l√™n ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
          return;
        }
      }

      // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      await api({
        method: typeHTTP.PUT,
        url: "/user/update",
        body: {
          phone: formData.phone,
          email: formData.email,
          fullName: formData.fullName,
        },
        sendToken: true,
      });

      // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
      await api({
        method: typeHTTP.PUT,
        url: "/userPersonal/update-personal-info",
        body: {
          dateOfBirth: parseDate(formData.dateOfBirth),
          gender: formData.gender,
          state: formData.state,
          profilePictureURL: imageUrl || "https://example.com/random-image.jpg",
        },
        sendToken: true,
      });

      Alert.alert("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      navigation.navigate("InformationUser");
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", error);
      Alert.alert("L·ªói", "C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i.");
    }
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <KeyboardAvoidingView behavior="padding" style={{ flex: 1 }}>
        <ScrollView style={{ flex: 1, backgroundColor: "#fff" }}>
          <View
            style={{
              backgroundColor: "#E53935",
              height: height * 0.2,
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <View
              style={{
                position: "absolute",
                top: height * 0.15,
                width: width,
                alignItems: "center",
              }}
            >
              <View
                style={{
                  width: width * 0.2,
                  height: width * 0.2,
                  borderRadius: (width * 0.2) / 2,
                  borderColor: "#E53935",
                  borderWidth: 2,
                  backgroundColor: "#fff",
                }}
              >
                {formData.profilePictureURL ? ( // ∆Øu ti√™n hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n t·ª´ profilePictureURL
                  <Image
                    source={{ uri: formData.profilePictureURL }}
                    style={{
                      width: "100%",
                      height: "100%",
                      borderRadius: (width * 0.2) / 2,
                    }}
                  />
                ) : image ? ( // N·∫øu kh√¥ng c√≥ URL, hi·ªÉn th·ªã ·∫£nh t·ª´ state image
                  <Image
                    source={{ uri: image }}
                    style={{
                      width: "100%",
                      height: "100%",
                      borderRadius: (width * 0.2) / 2,
                    }}
                  />
                ) : (
                  // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o, hi·ªÉn th·ªã ch·ªØ Avatar
                  <Text style={{ textAlign: "center", marginTop: 40 }}>
                    Avatar
                  </Text>
                )}

                <TouchableOpacity
                  style={{ position: "absolute", bottom: -10, right: -10 }}
                  onPress={toggleModal}
                >
                  <Text>üñºÔ∏è</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>

          {/* Modal ƒë·ªÉ ch·ªçn t·∫£i ·∫£nh ho·∫∑c ch·ª•p ·∫£nh */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={isModalVisible}
            onRequestClose={toggleModal} // Ch·ªâ ƒë√≥ng modal khi ng∆∞·ªùi d√πng y√™u c·∫ßu
          >
            <Pressable
              style={{
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0, 0, 0, 0.5)", // M√†u n·ªÅn t·ªëi cho modal
              }}
              onPress={toggleModal} // ƒê√≥ng modal khi b·∫•m ra ngo√†i
            >
              <Pressable
                style={{
                  width: width * 0.8,
                  backgroundColor: "#fff",
                  borderRadius: 10,
                  padding: 20,
                  alignItems: "center",
                }}
                onPress={(e) => e.stopPropagation()} // NgƒÉn kh√¥ng cho ƒë√≥ng modal khi b·∫•m v√†o b√™n trong modal
              >
                <Text style={{ fontSize: 18, marginBottom: 20 }}>
                  Ch·ªçn ·∫£nh ƒë·∫°i di·ªán
                </Text>
                <TouchableOpacity
                  style={{
                    backgroundColor: "#E53935",
                    padding: 10,
                    borderRadius: 5,
                    width: "100%",
                    alignItems: "center",
                    marginBottom: 10,
                  }}
                  onPress={() => {
                    openCamera(); // M·ªü camera
                    toggleModal(); // ƒê√≥ng modal sau khi camera ƒë∆∞·ª£c m·ªü
                  }}
                >
                  <Text style={{ color: "#fff", fontSize: 16 }}>Ch·ª•p ·∫£nh</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={{
                    backgroundColor: "#E53935",
                    padding: 10,
                    borderRadius: 5,
                    width: "100%",
                    alignItems: "center",
                    marginBottom: 10,
                  }}
                  onPress={() => {
                    openImageLibrary(); // M·ªü th∆∞ vi·ªán ·∫£nh
                    toggleModal(); // ƒê√≥ng modal sau khi th∆∞ vi·ªán ·∫£nh ƒë∆∞·ª£c m·ªü
                  }}
                >
                  <Text style={{ color: "#fff", fontSize: 16 }}>
                    Ch·ªçn t·ª´ th∆∞ vi·ªán
                  </Text>
                </TouchableOpacity>
              </Pressable>
            </Pressable>
          </Modal>

          {/* Form nh·∫≠p th√¥ng tin */}
          <View
            style={{
              padding: width * 0.05,
              marginTop: height * 0.05,
            }}
          >
            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              T√™n ng∆∞·ªùi d√πng
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.fullName}
              onChangeText={(value) => handleInputChange("fullName", value)}
            />

            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              S·ªë ƒëi·ªán tho·∫°i
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.phone}
              keyboardType="phone-pad"
              onChangeText={(value) => handleInputChange("phone", value)}
            />

            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              Email
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.email}
              keyboardType="email-address"
              onChangeText={(value) => handleInputChange("email", value)}
            />

            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              Ng√†y sinh
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.dateOfBirth}
              onChangeText={(value) => handleInputChange("dateOfBirth", value)}
            />

            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              Gi·ªõi t√≠nh
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.gender}
              onChangeText={(value) => handleInputChange("gender", value)}
            />

            <Text style={{ fontSize: 16, color: "#333", marginBottom: 5 }}>
              Tr·∫°ng th√°i
            </Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: "#E53935",
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.state}
              onChangeText={(value) => handleInputChange("state", value)}
            />

            <TouchableOpacity
              style={{
                backgroundColor: "#E53935",
                padding: 15,
                borderRadius: 8,
                alignItems: "center",
                marginTop: 20,
              }}
              onPress={handleSubmit}
            >
              <Text style={{ color: "#fff", fontSize: 18 }}>X√°c nh·∫≠n</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </TouchableWithoutFeedback>
  );
}
