import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, Dimensions, ScrollView, Modal, Pressable, Keyboard, KeyboardAvoidingView, TouchableWithoutFeedback, Alert, Image } from 'react-native';
import * as ImagePicker from 'expo-image-picker'; // S·ª≠ d·ª•ng expo-image-picker
import { useNavigation } from '@react-navigation/native';
import { api, typeHTTP } from '../../utils/api';

const { width, height } = Dimensions.get('window');

// H√†m ƒë·ªãnh d·∫°ng ng√†y theo DD/MM/YYYY
const formatDate = (date) => {
  const d = new Date(date);
  const day = (`0${d.getDate()}`).slice(-2);
  const month = (`0${d.getMonth() + 1}`).slice(-2);
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
};

// H√†m chuy·ªÉn ƒë·ªïi ng√†y t·ª´ ƒë·ªãnh d·∫°ng DD/MM/YYYY th√†nh Date object
const parseDate = (dateString) => {
  const [day, month, year] = dateString.split('/');
  return new Date(`${year}-${month}-${day}`);
};

export default function UpdateInformation() {
  const navigation = useNavigation();
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    dateOfBirth: '',
    gender: '',
    state: '',
    profilePictureURL: null, // ƒê·ªÉ l∆∞u URL ·∫£nh sau khi t·∫£i l√™n th√†nh c√¥ng
  });

  const [isModalVisible, setModalVisible] = useState(false);
  const [image, setImage] = useState(null); // ƒê·ªÉ l∆∞u ·∫£nh t·∫°m tr∆∞·ªõc khi t·∫£i l√™n

  useEffect(() => {
    fetchUserData();
  }, []);

  // H√†m l·∫•y d·ªØ li·ªáu t·ª´ API khi giao di·ªán ƒë∆∞·ª£c t·∫£i
  const fetchUserData = async () => {
    try {
      const profileResponse = await api({
        method: typeHTTP.GET,
        url: '/user/profile',
        sendToken: true,
      });

      const personalInfoResponse = await api({
        method: typeHTTP.GET,
        url: '/userPersonal/personal-info',
        sendToken: true,
      });

      const userProfile = profileResponse.user;
      const userPersonalInfo = personalInfoResponse.userPersonalInfo;

      // C·∫≠p nh·∫≠t formData v·ªõi d·ªØ li·ªáu t·ª´ API v√† ƒë·ªãnh d·∫°ng ng√†y sinh
      setFormData({
        fullName: userProfile.fullName,
        phone: userProfile.phoneNumber,
        email: userProfile.email,
        dateOfBirth: formatDate(userPersonalInfo.dateOfBirth),
        gender: userPersonalInfo.gender,
        state: userPersonalInfo.state,
        profilePictureURL: userPersonalInfo.profilePictureURL || null, // URL ·∫£nh t·ª´ API
      });
    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
    }
  };

  // H√†m t·∫£i l√™n ·∫£nh
  const uploadImage = async (imageUri) => {
    try {
      // Chu·∫©n h√≥a URI ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ t∆∞∆°ng th√≠ch v·ªõi Cloudinary v√† Multer
      const cleanUri = imageUri.replace('file://', '');
  
      const formDataUpload = new FormData();
      formDataUpload.append('image', {
        uri: cleanUri,
        type: 'image/png', // Thay ƒë·ªïi type ph√π h·ª£p n·∫øu l√† ·∫£nh JPEG
        name: 'photo.png',
      });
  
      const response = await api({
        method: typeHTTP.POST,
        url: '/upload/upload', // ƒê·∫£m b·∫£o URL ƒë√∫ng
        data: formDataUpload,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        sendToken: true,
      });
  
      if (response.success) {
        return response.imageUrl;
      } else {
        Alert.alert('L·ªói', 'T·∫£i l√™n ·∫£nh th·∫•t b·∫°i.');
        return null;
      }
    } catch (error) {
      console.error('L·ªói t·∫£i ·∫£nh:', error);
      return null;
    }
  };
  
  

  // H√†m m·ªü th∆∞ vi·ªán ·∫£nh
  const openImageLibrary = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();

    if (permissionResult.granted === false) {
      Alert.alert("B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh!");
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });

    console.log('Image Picker Result:', result); // Log to√†n b·ªô result ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu

    if (!result.canceled && result.assets && result.assets.length > 0) {
      const selectedImageUri = result.assets[0].uri; // L·∫•y URI ·∫£nh t·ª´ assets
      console.log('Selected Image URI:', selectedImageUri); // Log URI c·ªßa ·∫£nh ƒë·ªÉ ch·∫Øc ch·∫Øn n√≥ t·ªìn t·∫°i
      // Upload ·∫£nh v√† c·∫≠p nh·∫≠t URL v√†o formData
      const uploadedImageUrl = await uploadImage(selectedImageUri);
      if (uploadedImageUrl) {
        setFormData({ ...formData, profilePictureURL: uploadedImageUrl });
      } else {
        Alert.alert('L·ªói', 'T·∫£i l√™n ·∫£nh th·∫•t b·∫°i.');
      }
    } else {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn ·∫£nh.');
    }
  };


  // H√†m m·ªü camera
  const openCamera = async () => {
    const permissionResult = await ImagePicker.requestCameraPermissionsAsync();

    if (permissionResult.granted === false) {
      Alert.alert("B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p camera!");
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });

    console.log('Camera Result:', result); // Log k·∫øt qu·∫£ t·ª´ camera

    if (!result.cancelled && result.uri) {
      // Upload ·∫£nh v√† c·∫≠p nh·∫≠t URL v√†o formData
      const uploadedImageUrl = await uploadImage(result.uri);
      if (uploadedImageUrl) {
        setFormData({ ...formData, profilePictureURL: uploadedImageUrl }); // C·∫≠p nh·∫≠t URL ·∫£nh sau khi t·∫£i l√™n th√†nh c√¥ng
        setImage(result.uri); // C·∫≠p nh·∫≠t ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc khi upload
      } else {
        Alert.alert('L·ªói', 'T·∫£i l√™n ·∫£nh th·∫•t b·∫°i.');
      }
    } else {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ª•p ·∫£nh.');
    }
  };

  // H√†m hi·ªÉn th·ªã modal kh√¥ng b·ªã t·∫Øt khi quy·ªÅn b·ªã t·ª´ ch·ªëi
  const toggleModal = () => {
    if (!isModalVisible) {
      setModalVisible(true);
    } else {
      if (image === null) {
        Alert.alert('B·∫°n c·∫ßn ch·ªçn ·∫£nh!');
      }
      setModalVisible(false);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData({ ...formData, [field]: value });
  };

  const handleSubmit = async () => {
    try {
      let imageUrl = formData.profilePictureURL;

      // N·∫øu c√≥ ·∫£nh m·ªõi, t·∫£i ·∫£nh l√™n tr∆∞·ªõc
      if (image) {
        imageUrl = await uploadImage(image);
        if (!imageUrl) {
          Alert.alert('L·ªói', 'T·∫£i l√™n ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
          return;
        }
      }

      // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      await api({
        method: typeHTTP.PUT,
        url: '/user/update',
        body: {
          phone: formData.phone,
          email: formData.email,
          fullName: formData.fullName,
        },
        sendToken: true,
      });

      // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
      await api({
        method: typeHTTP.PUT,
        url: '/userPersonal/update-personal-info',
        body: {
          dateOfBirth: parseDate(formData.dateOfBirth),
          gender: formData.gender,
          state: formData.state,
          profilePictureURL: imageUrl || 'https://example.com/random-image.jpg',
        },
        sendToken: true,
      });

      Alert.alert('Th√†nh c√¥ng', 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
      navigation.navigate('InformationUser');
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t:', error);
      Alert.alert('L·ªói', 'C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i.');
    }
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <KeyboardAvoidingView behavior="padding" style={{ flex: 1 }}>
        <ScrollView style={{ flex: 1, backgroundColor: '#fff' }}>
          <View style={{
            backgroundColor: '#E53935',
            height: height * 0.2,
            justifyContent: 'center',
            alignItems: 'center',
          }}>
            <View style={{
              position: 'absolute',
              top: height * 0.15,
              width: width,
              alignItems: 'center',
            }}>
              <View style={{
                width: width * 0.2,
                height: width * 0.2,
                borderRadius: (width * 0.2) / 2,
                borderColor: '#E53935',
                borderWidth: 2,
                backgroundColor: '#fff',
              }}>
                {formData.profilePictureURL ? ( // ∆Øu ti√™n hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n t·ª´ profilePictureURL
                  <Image
                    source={{ uri: formData.profilePictureURL }}
                    style={{
                      width: '100%',
                      height: '100%',
                      borderRadius: (width * 0.2) / 2,
                    }}
                  />
                ) : image ? ( // N·∫øu kh√¥ng c√≥ URL, hi·ªÉn th·ªã ·∫£nh t·ª´ state image
                  <Image
                    source={{ uri: image }}
                    style={{
                      width: '100%',
                      height: '100%',
                      borderRadius: (width * 0.2) / 2,
                    }}
                  />
                ) : (
                  // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o, hi·ªÉn th·ªã ch·ªØ Avatar
                  <Text style={{ textAlign: 'center', marginTop: 40 }}>Avatar</Text>
                )}

                <TouchableOpacity
                  style={{ position: 'absolute', bottom: -10, right: -10 }}
                  onPress={toggleModal}
                >
                  <Text>üñºÔ∏è</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>

          {/* Modal ƒë·ªÉ ch·ªçn t·∫£i ·∫£nh ho·∫∑c ch·ª•p ·∫£nh */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={isModalVisible}
            onRequestClose={toggleModal}
          >
            <Pressable
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: 'rgba(0, 0, 0, 0)',
              }}
              onPress={toggleModal}
            >
              <Pressable
                style={{
                  width: width * 0.8,
                  backgroundColor: '#fff',
                  borderRadius: 10,
                  padding: 20,
                  alignItems: 'center',
                }}
                onPress={(e) => e.stopPropagation()}
              >
                <Text style={{ fontSize: 18, marginBottom: 20 }}>Ch·ªçn ·∫£nh ƒë·∫°i di·ªán</Text>
                <TouchableOpacity
                  style={{
                    backgroundColor: '#E53935',
                    padding: 10,
                    borderRadius: 5,
                    width: '100%',
                    alignItems: 'center',
                    marginBottom: 10,
                  }}
                  onPress={() => {
                    openCamera();
                    toggleModal();
                  }}
                >
                  <Text style={{ color: '#fff', fontSize: 16 }}>Ch·ª•p ·∫£nh</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={{
                    backgroundColor: '#E53935',
                    padding: 10,
                    borderRadius: 5,
                    width: '100%',
                    alignItems: 'center',
                    marginBottom: 10,
                  }}
                  onPress={() => {
                    openImageLibrary();
                    toggleModal();
                  }}
                >
                  <Text style={{ color: '#fff', fontSize: 16 }}>Ch·ªçn t·ª´ th∆∞ vi·ªán</Text>
                </TouchableOpacity>
              </Pressable>
            </Pressable>
          </Modal>

          {/* Form nh·∫≠p th√¥ng tin */}
          <View style={{
            padding: width * 0.05,
            marginTop: height * 0.05,
          }}>
            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>T√™n ng∆∞·ªùi d√πng</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.fullName}
              onChangeText={(value) => handleInputChange('fullName', value)}
            />

            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>S·ªë ƒëi·ªán tho·∫°i</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.phone}
              keyboardType="phone-pad"
              onChangeText={(value) => handleInputChange('phone', value)}
            />

            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>Email</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.email}
              keyboardType="email-address"
              onChangeText={(value) => handleInputChange('email', value)}
            />

            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>Ng√†y sinh</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.dateOfBirth}
              onChangeText={(value) => handleInputChange('dateOfBirth', value)}
            />

            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>Gi·ªõi t√≠nh</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.gender}
              onChangeText={(value) => handleInputChange('gender', value)}
            />

            <Text style={{ fontSize: 16, color: '#333', marginBottom: 5 }}>Tr·∫°ng th√°i</Text>
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#E53935',
                padding: 10,
                borderRadius: 8,
                marginBottom: 15,
              }}
              value={formData.state}
              onChangeText={(value) => handleInputChange('state', value)}
            />

            <TouchableOpacity
              style={{
                backgroundColor: '#E53935',
                padding: 15,
                borderRadius: 8,
                alignItems: 'center',
                marginTop: 20,
              }}
              onPress={handleSubmit}
            >
              <Text style={{ color: '#fff', fontSize: 18 }}>X√°c nh·∫≠n</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </TouchableWithoutFeedback>
  );
}
